"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOM = require("react-dom");
var HIGHLIGHT_CLASS = 'react-update-highlight';
var MATCHES_HIGHLIGHT_CLASS = /\s*\breact-update-highlight\b\s*/gi;
var STYLE = document.createElement('style');
STYLE.type = 'text/css';
exports.highlightUpdates = function (color) {
    if (color === void 0) { color = 'rgba(255, 0, 0, 0.5)'; }
    STYLE.innerHTML =
        ".react-update-highlight {\n  animation-name: react-update-highlight;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n}\n\n@keyframes react-update-highlight {\n  from {\n    background-color: " + color + ";\n  }\n\n  to {\n    background-color: transparent;\n  }\n}";
    document.head.appendChild(STYLE);
    var originalCreateElement = React.createElement;
    React.createElement = function () {
        var args = Array.prototype.slice.call(arguments);
        var component = args[0];
        if (typeof component === 'function' &&
            component.prototype instanceof React.Component &&
            !component.prototype.hasReactUpdateHighlight) {
            var originalComponentDidUpdate_1 = component.prototype.componentDidUpdate;
            component.prototype.hasReactUpdateHighlight = true;
            component.prototype.componentDidUpdate = function () {
                var updateArgs = Array.prototype.slice.call(arguments);
                var node;
                try {
                    node = ReactDOM.findDOMNode(this);
                }
                catch (error) {
                    return;
                }
                if (MATCHES_HIGHLIGHT_CLASS.test(node.className)) {
                    node.className = node.className.replace(MATCHES_HIGHLIGHT_CLASS, '');
                }
                void node.offsetWidth; // tslint:disable-line:no-unused-expression
                var needsSpace = node.className || node.className.lastIndexOf(' ') !== node.className.length - 1;
                node.className = "" + node.className + (needsSpace ? ' ' + HIGHLIGHT_CLASS : HIGHLIGHT_CLASS);
                if (typeof originalComponentDidUpdate_1 === 'function') {
                    originalComponentDidUpdate_1.apply(this, updateArgs);
                }
            };
        }
        return originalCreateElement.apply(this, args);
    };
};
exports.default = exports.highlightUpdates;
//# sourceMappingURL=index.js.map